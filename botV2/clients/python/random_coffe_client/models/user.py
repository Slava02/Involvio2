# coding: utf-8

"""
    api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from random_coffe_client.models.group import Group
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    birthday: datetime = Field(description="Birthday")
    city: StrictStr = Field(description="User's city")
    full_name: StrictStr = Field(description="First name")
    gender: StrictStr = Field(description="User's gender")
    goal: StrictStr = Field(description="User's goal for the meetings")
    groups: Optional[List[Group]] = Field(description="User's groups")
    id: StrictInt = Field(description="Telegram UserID")
    interests: StrictStr = Field(description="User's interests")
    photo_url: StrictStr = Field(description="Photo URL")
    position: StrictStr = Field(description="User's position in organization")
    socials: StrictStr = Field(description="User's account")
    user_name: StrictStr = Field(description="Username")
    __properties: ClassVar[List[str]] = ["birthday", "city", "full_name", "gender", "goal", "groups", "id", "interests", "photo_url", "position", "socials", "user_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        # set to None if groups (nullable) is None
        # and model_fields_set contains the field
        if self.groups is None and "groups" in self.model_fields_set:
            _dict['groups'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "birthday": obj.get("birthday"),
            "city": obj.get("city"),
            "full_name": obj.get("full_name"),
            "gender": obj.get("gender"),
            "goal": obj.get("goal"),
            "groups": [Group.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "id": obj.get("id"),
            "interests": obj.get("interests"),
            "photo_url": obj.get("photo_url"),
            "position": obj.get("position"),
            "socials": obj.get("socials"),
            "user_name": obj.get("user_name")
        })
        return _obj


