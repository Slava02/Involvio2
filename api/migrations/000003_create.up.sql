BEGIN;

CREATE TYPE "gender" AS ENUM (
    'f',
    'm'
    );

CREATE TYPE "goal" AS ENUM (
    'fun',
    'profit',
    '50_50'
    );

CREATE TABLE "group" (
                         "id" integer PRIMARY KEY,
                         "name" text UNIQUE NOT NULL
);

CREATE TABLE "user_group" (
                              "user_id" integer,
                              "group_id" integer,
                              PRIMARY KEY ("user_id", "group_id")
);

CREATE TABLE "user" (
                        "id" integer UNIQUE NOT NULL,
                        "username" text UNIQUE NOT NULL,
                        "full_name" text,
                        "birthday" date,
                        "city" varchar,
                        "socials" varchar,
                        "position" varchar,
                        "gender" gender,
                        "photo_url" varchar,
                        "interests" text,
                        "goal" goal
);

CREATE TABLE "holidays_status" (
                                   "id" SERIAL PRIMARY KEY,
                                   "user_id" integer NOT NULL,
                                   "status" bool,
                                   "till_date" date NOT NULL,
                                   "set_date" date NOT NULL
);

CREATE TABLE "event" (
                         "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         "date" date,
                         "name" varchar,
                         "description" varchar
);

CREATE TABLE "event_members" (
                                 "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                 "event_id" integer,
                                 "user_id" integer
);

CREATE TABLE "reviews" (
                           "id" SERIAL PRIMARY KEY,
                           "event_id" integer,
                           "who_id" integer,
                           "about_whom_id" integer,
                           "grade" integer NOT NULL
);

CREATE TABLE "blocks" (
                          "who" integer,
                          "whom" integer NOT NULL
);

ALTER TABLE "user_group" ADD FOREIGN KEY ("user_id") REFERENCES "user" ("id");

ALTER TABLE "user_group" ADD FOREIGN KEY ("group_id") REFERENCES "group" ("id");

ALTER TABLE "holidays_status" ADD FOREIGN KEY ("user_id") REFERENCES "user" ("id");

ALTER TABLE "event_members" ADD FOREIGN KEY ("event_id") REFERENCES "event" ("id");

ALTER TABLE "event_members" ADD FOREIGN KEY ("user_id") REFERENCES "user" ("id");

ALTER TABLE "reviews" ADD FOREIGN KEY ("event_id") REFERENCES "event" ("id");

ALTER TABLE "reviews" ADD FOREIGN KEY ("who_id") REFERENCES "user" ("id");

ALTER TABLE "reviews" ADD FOREIGN KEY ("about_whom_id") REFERENCES "user" ("id");

ALTER TABLE "blocks" ADD FOREIGN KEY ("who") REFERENCES "user" ("id");

COMMIT;

BEGIN;
-- Insert data into 'group' table
INSERT INTO "group" ("id", "name")
VALUES
    (1, 'Group_A'),
    (2, 'Group_B'),
    (3, 'Group_C'),
    (4, 'Group_D'),
    (5, 'Group_E');

-- Insert data into 'user' table with proper casting for gender
INSERT INTO "user" ("id", "username", "full_name", "birthday", "city", "socials", "position", "gender", "photo_url", "interests", "goal")
SELECT
    n AS id,
    'user_' || n AS username,
    'Full Name ' || n AS full_name,
    (CURRENT_DATE - (random() * 365 * 30)::int) AS birthday,
    'City ' || (1 + (random() * 5)::int) AS city,
    '@user' || n AS socials,
    'Position ' || (1 + (random() * 10)::int) AS position,
    CASE WHEN random() < 0.5 THEN 'f'::gender ELSE 'm'::gender END AS gender, -- Cast to ENUM
    'http://photo.url/user' || n AS photo_url,
    'Interests {1, 2, 3}' AS interests,
    CASE WHEN random() < 0.33 THEN 'fun'::goal WHEN random() < 0.66 THEN 'profit'::goal ELSE '50_50'::goal END AS goal
FROM generate_series(1, 10) n;

-- Insert data into 'user_group' table
INSERT INTO "user_group" ("user_id", "group_id")
SELECT
    u.id, g.id
FROM
    (SELECT id FROM "user") u,
    (SELECT id FROM "group") g
WHERE
        random() < 0.5; -- Randomly assign users to groups

-- Insert data into 'holidays_status' table
INSERT INTO "holidays_status" ("user_id", "status", "till_date", "set_date")
SELECT
    u.id,
    random() < 0.5 AS status,
    CURRENT_DATE + (random() * 365)::int AS till_date,
    CURRENT_DATE - (random() * 30)::int AS set_date
FROM
    (SELECT id FROM "user") u;

-- Insert data into 'event' table
INSERT INTO "event" ("date", "name", "description")
SELECT
                CURRENT_DATE + (random() * 30)::int AS date,
                'Event ' || n AS name,
                'Description for Event ' || n AS description
FROM generate_series(1, 5) n;

-- Insert data into 'event_members' table
INSERT INTO "event_members" ("event_id", "user_id")
SELECT
    e.id, u.id
FROM
    (SELECT id FROM "event") e,
    (SELECT id FROM "user") u
WHERE
        random() < 0.3; -- Randomly assign users to events

-- Insert data into 'reviews' table
INSERT INTO "reviews" ("event_id", "who_id", "about_whom_id", "grade")
SELECT
    e.id, u1.id, u2.id, (random() * 5)::int + 1 -- Grades between 1 and 5
FROM
    (SELECT id FROM "event") e,
    (SELECT id FROM "user") u1,
    (SELECT id FROM "user") u2
WHERE
        u1.id != u2.id AND random() < 0.5; -- Ensure different users for reviews

-- Insert data into 'blocks' table
INSERT INTO "blocks" ("who", "whom")
SELECT
    u1.id, u2.id
FROM
    (SELECT id FROM "user") u1,
    (SELECT id FROM "user") u2
WHERE
        u1.id != u2.id AND random() < 0.2; -- Randomly block other users

COMMIT;